// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssessmentManagerClient is the client API for AssessmentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssessmentManagerClient interface {
	// HC stands for health check service, tells where or not
	// the application is healthy.
	HC(ctx context.Context, in *HCRequest, opts ...grpc.CallOption) (*HCResponse, error)
	Kudos(ctx context.Context, in *KudosRequest, opts ...grpc.CallOption) (*KudosResponse, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type assessmentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessmentManagerClient(cc grpc.ClientConnInterface) AssessmentManagerClient {
	return &assessmentManagerClient{cc}
}

func (c *assessmentManagerClient) HC(ctx context.Context, in *HCRequest, opts ...grpc.CallOption) (*HCResponse, error) {
	out := new(HCResponse)
	err := c.cc.Invoke(ctx, "/gofx.v1.AssessmentManager/HC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentManagerClient) Kudos(ctx context.Context, in *KudosRequest, opts ...grpc.CallOption) (*KudosResponse, error) {
	out := new(KudosResponse)
	err := c.cc.Invoke(ctx, "/gofx.v1.AssessmentManager/Kudos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentManagerClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/gofx.v1.AssessmentManager/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessmentManagerServer is the server API for AssessmentManager service.
// All implementations should embed UnimplementedAssessmentManagerServer
// for forward compatibility
type AssessmentManagerServer interface {
	// HC stands for health check service, tells where or not
	// the application is healthy.
	HC(context.Context, *HCRequest) (*HCResponse, error)
	Kudos(context.Context, *KudosRequest) (*KudosResponse, error)
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

// UnimplementedAssessmentManagerServer should be embedded to have forward compatible implementations.
type UnimplementedAssessmentManagerServer struct {
}

func (UnimplementedAssessmentManagerServer) HC(context.Context, *HCRequest) (*HCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HC not implemented")
}
func (UnimplementedAssessmentManagerServer) Kudos(context.Context, *KudosRequest) (*KudosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kudos not implemented")
}
func (UnimplementedAssessmentManagerServer) Report(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}

// UnsafeAssessmentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssessmentManagerServer will
// result in compilation errors.
type UnsafeAssessmentManagerServer interface {
	mustEmbedUnimplementedAssessmentManagerServer()
}

func RegisterAssessmentManagerServer(s grpc.ServiceRegistrar, srv AssessmentManagerServer) {
	s.RegisterService(&AssessmentManager_ServiceDesc, srv)
}

func _AssessmentManager_HC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentManagerServer).HC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofx.v1.AssessmentManager/HC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentManagerServer).HC(ctx, req.(*HCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentManager_Kudos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KudosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentManagerServer).Kudos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofx.v1.AssessmentManager/Kudos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentManagerServer).Kudos(ctx, req.(*KudosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentManager_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentManagerServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofx.v1.AssessmentManager/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentManagerServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssessmentManager_ServiceDesc is the grpc.ServiceDesc for AssessmentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssessmentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gofx.v1.AssessmentManager",
	HandlerType: (*AssessmentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HC",
			Handler:    _AssessmentManager_HC_Handler,
		},
		{
			MethodName: "Kudos",
			Handler:    _AssessmentManager_Kudos_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _AssessmentManager_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/server.proto",
}

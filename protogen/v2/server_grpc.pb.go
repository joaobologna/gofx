// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssessmentManagerClient is the client API for AssessmentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssessmentManagerClient interface {
	// HC stands for health check service, tells where or not
	// the application is healthy.
	HC(ctx context.Context, in *HCRequest, opts ...grpc.CallOption) (*HCResponse, error)
	KudosAnonymous(ctx context.Context, in *KudosAnonymousRequest, opts ...grpc.CallOption) (*KudosAnonymousResponse, error)
	ReportAnonymous(ctx context.Context, in *ReportAnonymousRequest, opts ...grpc.CallOption) (*ReportAnonymousResponse, error)
}

type assessmentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessmentManagerClient(cc grpc.ClientConnInterface) AssessmentManagerClient {
	return &assessmentManagerClient{cc}
}

func (c *assessmentManagerClient) HC(ctx context.Context, in *HCRequest, opts ...grpc.CallOption) (*HCResponse, error) {
	out := new(HCResponse)
	err := c.cc.Invoke(ctx, "/gofx.v2.AssessmentManager/HC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentManagerClient) KudosAnonymous(ctx context.Context, in *KudosAnonymousRequest, opts ...grpc.CallOption) (*KudosAnonymousResponse, error) {
	out := new(KudosAnonymousResponse)
	err := c.cc.Invoke(ctx, "/gofx.v2.AssessmentManager/KudosAnonymous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentManagerClient) ReportAnonymous(ctx context.Context, in *ReportAnonymousRequest, opts ...grpc.CallOption) (*ReportAnonymousResponse, error) {
	out := new(ReportAnonymousResponse)
	err := c.cc.Invoke(ctx, "/gofx.v2.AssessmentManager/ReportAnonymous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessmentManagerServer is the server API for AssessmentManager service.
// All implementations should embed UnimplementedAssessmentManagerServer
// for forward compatibility
type AssessmentManagerServer interface {
	// HC stands for health check service, tells where or not
	// the application is healthy.
	HC(context.Context, *HCRequest) (*HCResponse, error)
	KudosAnonymous(context.Context, *KudosAnonymousRequest) (*KudosAnonymousResponse, error)
	ReportAnonymous(context.Context, *ReportAnonymousRequest) (*ReportAnonymousResponse, error)
}

// UnimplementedAssessmentManagerServer should be embedded to have forward compatible implementations.
type UnimplementedAssessmentManagerServer struct {
}

func (UnimplementedAssessmentManagerServer) HC(context.Context, *HCRequest) (*HCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HC not implemented")
}
func (UnimplementedAssessmentManagerServer) KudosAnonymous(context.Context, *KudosAnonymousRequest) (*KudosAnonymousResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KudosAnonymous not implemented")
}
func (UnimplementedAssessmentManagerServer) ReportAnonymous(context.Context, *ReportAnonymousRequest) (*ReportAnonymousResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAnonymous not implemented")
}

// UnsafeAssessmentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssessmentManagerServer will
// result in compilation errors.
type UnsafeAssessmentManagerServer interface {
	mustEmbedUnimplementedAssessmentManagerServer()
}

func RegisterAssessmentManagerServer(s grpc.ServiceRegistrar, srv AssessmentManagerServer) {
	s.RegisterService(&AssessmentManager_ServiceDesc, srv)
}

func _AssessmentManager_HC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentManagerServer).HC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofx.v2.AssessmentManager/HC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentManagerServer).HC(ctx, req.(*HCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentManager_KudosAnonymous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KudosAnonymousRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentManagerServer).KudosAnonymous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofx.v2.AssessmentManager/KudosAnonymous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentManagerServer).KudosAnonymous(ctx, req.(*KudosAnonymousRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentManager_ReportAnonymous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAnonymousRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentManagerServer).ReportAnonymous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofx.v2.AssessmentManager/ReportAnonymous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentManagerServer).ReportAnonymous(ctx, req.(*ReportAnonymousRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssessmentManager_ServiceDesc is the grpc.ServiceDesc for AssessmentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssessmentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gofx.v2.AssessmentManager",
	HandlerType: (*AssessmentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HC",
			Handler:    _AssessmentManager_HC_Handler,
		},
		{
			MethodName: "KudosAnonymous",
			Handler:    _AssessmentManager_KudosAnonymous_Handler,
		},
		{
			MethodName: "ReportAnonymous",
			Handler:    _AssessmentManager_ReportAnonymous_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/server.proto",
}
